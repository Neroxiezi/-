<?php
/**
 * Created by PhpStorm.
 * User: 南丞
 * Date: 2019/4/15
 * Time: 16:11
 *
 *
 *                      _ooOoo_
 *                     o8888888o
 *                     88" . "88
 *                     (| ^_^ |)
 *                     O\  =  /O
 *                  ____/`---'\____
 *                .'  \\|     |//  `.
 *               /  \\|||  :  |||//  \
 *              /  _||||| -:- |||||-  \
 *              |   | \\\  -  /// |   |
 *              | \_|  ''\---/''  |   |
 *              \  .-\__  `-`  ___/-. /
 *            ___`. .'  /--.--\  `. . ___
 *          ."" '<  `.___\_<|>_/___.'  >'"".
 *        | | :  `- \`.;`\ _ /`;.`/ - ` : | |
 *        \  \ `-.   \_ __\ /__ _/   .-` /  /
 *  ========`-.____`-.___\_____/___.-`____.-'========
 *                       `=---='
 *  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 *           佛祖保佑       永无BUG     永不修改
 *
 */
/**
 *  1. 负载均衡算法有哪些?
 *  轮询法: 将请求按顺序轮流地分配到后端服务器上,它均衡地对待后端的每一台服务器,而不关系服务器实际的连接数和当前的系统负载.
 *  随机法: 通过系统的随机算法,根据后端服务器的列表大小值来随机选取其中的一台服务器进行访问。
 *  源地址哈希法: 根据获取客户端的IP地址, 通过哈希函数计算得到一个数值, 用该数值对服务器列表的大小进行取模运算,得到的结果便是客服端要访问服务器的序号。采用源地址哈希算法进行负载均衡，同一IP地址的客户端
 *  当后端服务器列表不变时，它每次都会映射到同一台后端服务器进行访问。
 *  加权轮询法: 不同的后端服务器可能机器的配置和当前系统的负载并不相同, 因此他们的抗压能力也不相同。给配置高，负载低的机器配置更高的权重 让其处理更多的请求;而配置低,负载高的基础,给其分配较低的权重
 *  降低其系统负载,加权轮询能很好地处理这一问题, 并将请求顺序且按照权重分配到后端
 *  加权随机法: 与加权轮询法一样,加权随机法也跟据后端机器的配置, 系统的负载分配不同的权重。 不同的是,它是按照权重随机请求后端服务器,而非顺序。
 *  最小连接数法: 由于后端服务器的配置不尽相同,对于请求的处理有快有慢, 最小连接数法根据后端服务器当前的连接情况, 动态地选取其中当前积压连接数最少的一台服务器来处理当前的请求, 尽可能地提高后端服务的利用效率, 将负责合理地分流到每一台服务器.
 *
 *  2.
 *
 *
 */